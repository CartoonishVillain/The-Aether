version: 2.1

parameters:
  artifact-name:
    type: string
    default: aether

jobs:
  build:
    docker:
      - image: cimg/openjdk:8.0.282
    # machine:
    #   image: ubuntu-2004:202104-01

    environment:
      JVM_OPTS: -Xmx3200m
      _JAVA_OPTIONS: -Xmx3200m
      GRADLE_OPTS: -Dorg.gradle.daemon=false
    steps:
      - checkout
      # - restore_cache:
      #     keys:
      #       - v3-dependencies-{{ checksum "build.gradle" }}
      #       - v3-dependencies-

      # - run: gradle dependencies
      # - save_cache:
      #     paths:
      #       - ~/repo/.gradle
      #     key: v3-dependencies-{{ checksum "build.gradle" }}
      # - run: gradle test
      # - run: gradle build
      - run: mkdir -p ~/project/build/libs
      - run: echo "test" > ~/project/build/libs/<< pipeline.parameters.artifact-name >>-${CIRCLE_BRANCH}.jar
      - store_artifacts:
          path: ~/project/build/libs
      - persist_to_workspace:
          root: ~/project/build/libs
          paths: 
            - << pipeline.parameters.artifact-name >>-*.jar

  deploy:
    machine:
        image: ubuntu-2004:202107-02
    steps:
      - run:
          name: Install OpenVPN
          command: |
            sudo apt update && sudo apt install apt-transport-https net-tools
            sudo wget https://swupdate.openvpn.net/repos/openvpn-repo-pkg-key.pub
            sudo apt-key add openvpn-repo-pkg-key.pub
            sudo wget -O /etc/apt/sources.list.d/openvpn3.list https://swupdate.openvpn.net/community/openvpn3/repos/openvpn3-focal.list
            sudo apt update && sudo apt install openvpn3

      - run:
          name: Check IP before VPN connection
          command: |
            echo "Public IP before VPN connection is $(curl checkip.amazonaws.com)"

      - run:
          name: VPN Setup
          background: true
          command: |
            mkdir -m700 -p .openvpn3/autoload
            CLIENT_PATH=~/project/.openvpn3/autoload/client

            echo $VPN_CLIENT_LOAD | base64 --decode > $CLIENT_PATH.autoload
            echo $VPN_CLIENT_CONFIG | base64 --decode > $CLIENT_PATH.ovpn

            #IMPORTANT: Include the following 3 lines to exclude the link-local range
            phone_home="$(netstat -an | grep ':22 .*ESTABLISHED' | head -n1 | awk '{ split($5, a, ":"); print a[1] }')"
            echo $phone_home
            echo -e "\nroute $phone_home 255.255.255.255 net_gateway" >> $CLIENT_PATH.ovpn
            echo "route 169.254.0.0 255.255.0.0 net_gateway" >> $CLIENT_PATH.ovpn
            
            sudo openvpn3-autoload --directory .openvpn3/autoload
            
      - run: 
          name: Wait for the connection to be established and check
          command: |
            while [ $(sudo openvpn3 sessions-list|grep -c "Client connected") == 0 ]; do
              echo "Attempting to connect..."
              sleep 1;
            done
            echo "VPN Connected"
            
            sudo openvpn3 sessions-list
            echo "Public IP is now $(curl checkip.amazonaws.com)"

      - run:
          name: Run commands in our infrastructure
          command: |
            INSTANCE_NUMBER=6 # TODO: Create a way of selecting this from servers endpoint

            REINSTALL_RESPONSE=$(curl -s -o /dev/null -I -X POST -w "%{http_code}" \
            "${DEPLOY_LOCATION}/api/application/servers/${INSTANCE_NUMBER}/reinstall" \
            -H "Authorization: Bearer ${DEPLOY_KEY}")
            
            if [[ $REINSTALL_RESPONSE == 204 ]]; then
              echo "Server reinstallation has started."
              
              while [[ $(curl -s "${DEPLOY_LOCATION}/api/application/servers/${INSTANCE_NUMBER}" \
                -H "Authorization: Bearer ${DEPLOY_KEY}" | jq '.attributes | .status') != "null" ]]; 
              do
                echo "Waiting for installation..."
                sleep 10
              done

              echo "Sending start signal to server."

              SERVER_ID=$(curl -s "${DEPLOY_LOCATION}/api/application/servers/${INSTANCE_NUMBER}" \
                -H "Authorization: Bearer ${DEPLOY_KEY}" | jq -r '.attributes | .identifier')
              
              START_RESPONSE=$(curl -s -o /dev/null -I -X POST -w "%{http_code}" "${DEPLOY_LOCATION}/api/client/servers/${SERVER_ID}/power" \
                -H "Accept: application/json" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${USER_KEY}" \
                -d '{ "signal": "start" }')

              if [[ $START_RESPONSE == 204 ]]; then
                echo "Server received start signal."
              else
                echo "Server start unsucessful. Response: ${START_RESPONSE}"
                exit 1
              fi
            else
              echo "Received ${REINSTALL_RESPONSE}: Reinstall unsucessful."
              exit 1
            fi

      - run:
          name: Disconnect from OpenVPN
          command: |
            SESSION_PATH=$(sudo openvpn3 sessions-list | grep Path | awk -F': ' '{print $2}')
            echo $SESSION_PATH
            sudo openvpn3 session-manage --session-path $SESSION_PATH --disconnect
          when: always

workflows:
  build-and-deploy:
    jobs:
      - build
      - deploy:
          context:
            - vpn
          # filters:
          #   branches:
          #     only: 
          #       - "main"
          requires:
            - build